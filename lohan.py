from telebot import*
import random
import requests
from telebot.types import InputMediaPhoto
from dotenv import load_dotenv
import sqlite3
import json
from pathlib import Path
import os
import random
words = [' —è', ' —á–∏—Ç–∞–ª',' —Å–µ–≥–æ–¥–Ω—è',' –≤–æ–π–Ω—É',' –≤–∏–¥–µ–ª',' —Ç—ã',' –¥–æ—Ä–æ–≥–æ–π',' –≤',' –∑–∞–≤—Ç—Ä–∞',' –¥–µ–ø',' –¥–∞–≤–∞–π',' –∑–æ–ª–æ—Ç–æ']
demid_word = ['—Ç–æ–ø', '—Ö–æ—Ä–æ—à–∏ —á–µ–ª–∏–∫','–ª–µ–≥–µ–Ω–¥–∞','–ª—É—á—à–∏–π','–≥–µ–Ω–∏–π', '–Ω–∞—à —Å–ª–æ–Ω—è—Ä–∞!','–ø–∏–∫ —á–µ–ª–æ–≤–µ—á–µ—Å—Ç–≤–∞']

load_dotenv()
TOKEN ="7656035471:AAGXGG01QgXh7s4s6JkQf6vEB2kpoyBrmsI"
API_KEY ="AIzaSyDFKWIfpyRQM2VcW5a3ArQiv9mloH3-zJA"
SEARCH_ENGINE_ID ="155aabc4ca19e47cd"

bot = TeleBot(TOKEN)
name = ''
path = Path('blacklist.json')
path_searh = Path('searh.json')
blacklist = json.loads(path.read_text())

@bot.message_handler(commands=['start'])
def menu(message):
    markup = types.InlineKeyboardMarkup()
    btm1 = types.InlineKeyboardButton('—Ç–µ–∫—Å—Ç', callback_data='text')
    btm2 = types.InlineKeyboardButton('–∫–∞—Ä—Ç–∏–Ω–∫–∞', callback_data='jpg')
    btm3 = types.InlineKeyboardButton('\t–∏–∑–º–µ–Ω–∏—Ç—å\t', callback_data='edit')
    btm4 = types.InlineKeyboardButton('\t—É–¥–∞–ª–∏—Ç—å\t', callback_data='delete')
    btm5 = types.InlineKeyboardButton('–í–æ—Å—Ö–≤–∞–ª–∏—Ç—å –¥–µ–º–∏–¥–∞', callback_data='demid')
    markup.add(btm3)
    markup.add(btm4)
    markup.row(btm1, btm2)
    markup.add(btm5)
    bot.reply_to(message, '–î–æ–±—Ä—ã–π –¥–µ–Ω—å!')
    bot.send_message(message.chat.id, '–ß–µ–º –∑–∞–π–º—ë–º—Å—è?', reply_markup=markup)


@bot.message_handler(commands=['setnameuser'])
def set_name_user(message):
    sql = sqlite3.connect(f'database/{message.chat.title}.sql')
    cur = sql.cursor()
    cur.execute("CREATE TABLE IF NOT EXISTS users (id int auto_increment primary key, name varchar(50))")
    sql.commit()
    cur.close()
    sql.close()

    bot.send_message(message.chat.id, '–í–≤–µ–¥–∏ –Ω–∏–∫')
    bot.register_next_step_handler(message, set_name)

def set_name(message):
    global name
    name = message.text.strip()
    sql = sqlite3.connect(f'database/{message.chat.title}.sql')
    cur = sql.cursor()
    cur.execute(f"INSERT INTO users (name) VALUES ('%s')" % (name))
    sql.commit()
    cur.close()
    sql.close()
    bot.send_message(message.chat.id, f'–î–æ–±–∞–≤–ª–µ–Ω')


@bot.message_handler(commands=['all'])
def note_all(message):
    try:
        sql = sqlite3.connect(f'database/{message.chat.title}.sql')
        cur = sql.cursor()
        cur.execute(f"SELECT * FROM users")
        users = cur.fetchall()
        note = ''
        for user in users:
            note += f"{user[1]}\n"
        cur.close()
        sql.close()
        bot.send_message(message.chat.id, note)
    except sqlite3.OperationalError:
        pass

@bot.message_handler(commands=['add_blacklist'])
def add_blacklist(message):
    if message.from_user.id == 1488279593:
        bot.reply_to(message, '–í–≤–µ–¥–∏—Ç–µ –Ω–∏–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:')
        bot.register_next_step_handler(message, adding)
    else:
        bot.reply_to(message, '–£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤')

def adding(message):
    global blacklist
    if message.from_user.id == 1488279593:
       blacklist.append(message.text)
       blacklist = json.dumps(blacklist)
       path.write_text(blacklist)
       blacklist = json.loads(path.read_text())

@bot.message_handler(commands=['check_search'])
def check_search(message):
    if message.from_user.id == 1488279593:
        result = ''
        content = json.loads(path_searh.read_text())
        for nickname, image in content.items():
            result += f'{nickname}: {image}\n'
        bot.send_message(message.chat.id, result) 


@bot.message_handler()
def send_info(message):
    text = message.text
    test = message.text.split()
    name = test[0]
    try:
        i = int(test[-1])
    except ValueError:
        pass
    else:
        if message.from_user.username not in blacklist:
            for _ in range(1, 10+1):
                bot.send_message(message.chat.id, test[0:-1])
    if name.strip().lower() == '–ª–æ—Ö–∞–Ω':
        bot.send_message(message.chat.id, text[6:])
    elif text == '—Å–∫–∏–Ω—å –∏–Ω—Ñ—É':
        bot.send_message(message.chat.id, message)
    else:
        pass


@bot.callback_query_handler(func=lambda callback:True)
def callback_message(callback):
    if callback.data == 'text':
        i = random.randint(1, 12)
        mess = ''
        for _ in range(i):
            mess += random.choice(words)
        bot.send_message(callback.message.chat.id, mess)
    elif callback.data == 'delete':
        bot.delete_message(callback.message.chat.id, callback.message.message_id-random.randint(1, 10))
    elif callback.data == 'edit':
        bot.edit_message_text('–ò–∑–º–µ–Ω—ë–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç!', callback.message.chat.id, callback.message.message_id-1)
    elif callback.data == 'jpg':
        if callback.message.from_user.username not in blacklist:
            bot.reply_to(callback.message, "–ß—Ç–æ —Ç—ã —Ö–æ—á–µ—à—å —É–≤–∏–¥–µ—Ç—å? (–ü–∏—à–∏ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º!)")
            bot.register_next_step_handler(callback.message, send_images)
        else:
            bot.send_message('–í–∞–º –∑–∞–ø—Ä–µ—â–µ–Ω–æ —ç—Ç–æ –¥–µ–ª–∞—Ç—å')
    elif callback.data == 'demid':
        bot.send_message(callback.message.chat.id, f'–î–µ–º–∏–¥ {random.choice(demid_word)}')

def send_images(message):
        try:
            if message.from_user.id != 1488279593:
                content = json.loads(path_searh.read_text())
                content[f'{message.from_user.username}{random.randint(1, 1000000)}'] = message.text
                content = json.dumps(content)
                path_searh.write_text(content)
            query = message.text
            if message.from_user.username not in blacklist:
                url = f"https://www.googleapis.com/customsearch/v1?q={query}&key={API_KEY}&cx={SEARCH_ENGINE_ID}&searchType=image"
                response = requests.get(url)
                response.raise_for_status()
                data = response.json()
                rndm_num = random.randint(1, 10)
                images = [item['link'] for item in data.get('items', [])[rndm_num:rndm_num+1]]
                
                if not images:
                    bot.reply_to(message, "–ü–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ üò¢")
                    return

                media_group = [InputMediaPhoto(img) for img in images]
                bot.send_media_group(message.chat.id, media_group)
            else:
                bot.send_message('–í–∞–º –∑–∞–ø—Ä–µ—â–µ–Ω–æ —ç—Ç–æ –¥–µ–ª–∞—Ç—å')
            
        except requests.exceptions.RequestException as e:
            bot.reply_to(message, f"–û—à–∏–±–∫–∞")
        except Exception as e:
            bot.reply_to(message, f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –ª—É—á—à–µ –ø–∏—à–∏ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º —è–∑—ã–∫–µ")

bot.polling(none_stop=True)